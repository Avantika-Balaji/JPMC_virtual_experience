diff --git a/org/App.tsx b/new/App.tsx
index 0728518..2c4e1d8 100644
--- a/org/App.tsx
+++ b/new/App.tsx
@@ -8,6 +8,8 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : boolean,
+
 }
 
 /**
@@ -22,6 +24,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph : false,
+
     };
   }
 
@@ -29,19 +33,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
+
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x=0;
+    const interval = setInterval(()=> {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true, 
+      });
     });
-  }
+      x++;
+      if(x>1000){
+        clearInterval(interval);
+      }
+      },100);
+    }
+    
 
   /**
    * Render the App react component
diff --git a/org/Graph.tsx b/new/Graph.tsx
index ec1430e..b77a20f 100644
--- a/org/Graph.tsx
+++ b/new/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -48,7 +48,14 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distant count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}'
+        );
       elem.load(this.table);
+      
     }
   }
 
